{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\ud83d\udc4f\u6765\u5230Zzz\u7684Wiki # \u4e3b\u8981\u6a21\u5757\u6709 CPP\u4ecb\u7ecd","title":"Courses"},{"location":"#zzzwiki","text":"\u4e3b\u8981\u6a21\u5757\u6709 CPP\u4ecb\u7ecd","title":"\u6b22\u8fce\ud83d\udc4f\u6765\u5230Zzz\u7684Wiki"},{"location":"GNN/CS224W/","text":"","title":"CS 224W"},{"location":"Paper/1Detection/","text":"One Stage Object Detection # \u8fd9\u91cc\u4e3b\u8981\u5f52\u7eb3\u3001\u603b\u7ed3\u5728 object detection\uff08\u7269\u4f53\u8bc6\u522b\uff09\u9886\u57df\uff0cone-stage\u7684\u8bba\u6587\u3002 Yolo # You Look Only Once Yolo V1 # \u8bba\u6587\u94fe\u63a5\uff1a https://arxiv.org/abs/1506.02640 OverFeat # \u8bba\u6587\u94fe\u63a5\uff1a https://arxiv.org/abs/1312.6229 overfeat\u5173\u6ce8\u4e8e\u4e09\u4e2a computer vision \u7684 topic\uff0cclassification\u3001localization\u3001detection\u3002 SSD # \u8bba\u6587\u94fe\u63a5\uff1a https://arxiv.org/abs/1512.02325","title":"One Stage"},{"location":"Paper/1Detection/#one-stage-object-detection","text":"\u8fd9\u91cc\u4e3b\u8981\u5f52\u7eb3\u3001\u603b\u7ed3\u5728 object detection\uff08\u7269\u4f53\u8bc6\u522b\uff09\u9886\u57df\uff0cone-stage\u7684\u8bba\u6587\u3002","title":"One Stage Object Detection"},{"location":"Paper/1Detection/#yolo","text":"You Look Only Once","title":"Yolo"},{"location":"Paper/1Detection/#yolo-v1","text":"\u8bba\u6587\u94fe\u63a5\uff1a https://arxiv.org/abs/1506.02640","title":"Yolo V1"},{"location":"Paper/1Detection/#overfeat","text":"\u8bba\u6587\u94fe\u63a5\uff1a https://arxiv.org/abs/1312.6229 overfeat\u5173\u6ce8\u4e8e\u4e09\u4e2a computer vision \u7684 topic\uff0cclassification\u3001localization\u3001detection\u3002","title":"OverFeat"},{"location":"Paper/1Detection/#ssd","text":"\u8bba\u6587\u94fe\u63a5\uff1a https://arxiv.org/abs/1512.02325","title":"SSD"},{"location":"Paper/2Detection/","text":"One Stage Object Detection # \u8fd9\u91cc\u4e3b\u8981\u5f52\u7eb3\u3001\u603b\u7ed3\u5728 object detection\uff08\u7269\u4f53\u8bc6\u522b\uff09\u9886\u57df\uff0ctwo-stage\u7684\u7f51\u7edc\u65b9\u6cd5\u3002 RCNN (Region CNN) #","title":"Two Stage"},{"location":"Paper/2Detection/#one-stage-object-detection","text":"\u8fd9\u91cc\u4e3b\u8981\u5f52\u7eb3\u3001\u603b\u7ed3\u5728 object detection\uff08\u7269\u4f53\u8bc6\u522b\uff09\u9886\u57df\uff0ctwo-stage\u7684\u7f51\u7edc\u65b9\u6cd5\u3002","title":"One Stage Object Detection"},{"location":"Paper/2Detection/#rcnn-region-cnn","text":"","title":"RCNN (Region CNN)"},{"location":"Paper/Darts/","text":"Differential ARchiTecture Search\uff08DARTS\uff09 # \u672c\u7ae0\u8bb2\u4ecb\u7ecd\u4e09\u7bc7paper\uff0cDARTS\uff0cP-DARTS \u4ee5\u53ca PC-DARTS\uff0c\u8bba\u6587\u94fe\u63a5\uff1a DARTS \uff0c P-DARTS \uff0c PC-DARTS Darts # Abstract # \u4f20\u7edf\u7684neural network search\uff0c\u5176\u641c\u7d22\u57df\u5927\u591a\u4e3a\u79bb\u6563\u57df\uff0c\u641c\u7d22\u65b9\u6cd5\u4e3a RL based \u6216\u8005 evolution\u3002\u8fd9\u7bc7 Darts \u7684\u641c\u7d22\u57df\u5219\u662f continuous space\uff0c\u5229\u7528\u7f51\u7edc\u7684 loss \u53bb update \u94fe\u63a5\u65b9\u5f0f\u3002 Introduction # Method # Method Description # Darts \u5148\u5c06\u8fd0\u7b97\u6a21\u5757 block \u8fdb\u884c dense \u94fe\u63a5\uff08\u7c7b\u4f3c Densenet\uff09\u7b2c j \u4e2a\u6a21\u5757\u7684\u8f93\u5165\uff0c\u662f\u6709\u6240\u6709 index \u5c0f\u4e8e j \u7684\u6a21\u5757\u7684\u8f93\u51fa\u7684\u52a0\u6743\u548c\u3002 x^{(j)}=\\sum_{i<j}o^{(i,j)}(x^{i})\\tag{1} \u5728\u4e0b\u56fe\u4e2d\uff0c\u6bcf\u6839\u7ebf\u4ee3\u8868\u4e00\u79cd\u53ef\u80fd\u7684\u64cd\u4f5c\uff08\u6bd4\u5982 convolution\uff0cmax pooling\uff0czero\u94fe\u63a5\uff09\u3002\u90a3\u4e48\u6211\u4eec\u5728\u6bcf\u79cd\u64cd\u4f5c\u4e0a\u8d4b\u4e88\u4e00\u4e2a\u6743\u91cd \\alpha_i \\alpha_i \uff0c\u7136\u540e\u6839\u636e \\alpha \\alpha \u6765 \u8fc7\u4e00\u4e2a softmax \u52a0\u6743\u8ba1\u7b97\u51fa\u771f\u5b9e\u7684 output \\bar{o}^{(i,j)}(x) = \\sum_{o\\in \\mathcal{O}} \\frac{exp(\\alpha_o^{(i,j)})} {\\sum_{o'\\in\\mathcal{O}} exp(\\alpha_{o'}^{(i,j)})} o(x) \\tag{2} \u5728\u641c\u7d22\u7ed3\u675f\u4e4b\u540e\uff0c\u6211\u4eec\u4f1a\u9009\u53d6 \\alpha_i \\alpha_i \u6700\u5927\u7684\u4e00\u79cd\u64cd\u4f5c\u4f5c\u4e3a\u6211\u4eec\u6700\u540e\u7684\u8fde\u63a5\u65b9\u5f0f\uff08\u5176\u4ed6\u7684\u5907\u9009\u8fde\u63a5\u65b9\u5f0f\u76f4\u63a5\u653e\u5f03\uff09\uff1a o^{(i,j)} = \\arg\\max_{o\\in\\mathcal{O}} \\alpha_o^{(i,j)} \\tag{3} Example # \u4ee5 Darts \u7684 figure1 \u4e3a\u4f8b\u5b50\u8bf4\u660e\u3002\u5047\u8bbe block 0 \u548c block 1\u4e4b\u95f4\u6709\u4e09\u79cd\u8fde\u63a5\uff0c\u7ea2\u7ebf\u4ee3\u8868 convolution\uff0c\u7eff\u7ebf\u4ee3\u8868 avg pooling\uff0c\u84dd\u7ebf\u4ee3\u8868 zero \u8fde\u63a5\u3002\u5728\u5b66\u4e60\u9636\u6bb5\u7ed3\u675f\u4e4b\u540e\uff0c\u6211\u4eec\u7684\u6743\u91cd\u53c2\u6570 \\alpha^{(0,1)} \\alpha^{(0,1)} \u4e3a [2.3, 0.5, 0.9] [2.3, 0.5, 0.9] \uff0c\uff08\u5982\u679c\u8fc7 softmax \u5219\u662f [0.71, 0.12, 0.17] [0.71, 0.12, 0.17] \uff09\u90a3\u4e48 \\alpha_1^{(0,1)} \\alpha_1^{(0,1)} \u7684\u6743\u91cd\u6700\u5927\uff0c\u6211\u4eec\u9009\u62e9 convolution \u4f5c\u4e3a\u6700\u7ec8\u7684\u8fde\u63a5\u65b9\u5f0f\u3002 Training Method # \u5728\u8bad\u7ec3\u7684\u65f6\u5019\uff0c\u6709\u4e24\u4e2a\u53c2\u6570\u9700\u8981\u4f9d\u6b21\u4f18\u5316\uff0c\u4e00\u4e2a\u662f\u6211\u4eec\u7684\u8fde\u63a5\u6743\u91cd\u53c2\u6570 \\alpha \\alpha \uff0c\u53e6\u5916\u5c31\u662f\u5728\u5f53\u524d\u6743\u91cd\u7684\u8fde\u63a5\u65b9\u5f0f\u4e0b\uff0c\u6211\u4eec\u7684\u6700\u4f18\u7f51\u7edc\u53c2\u6570 w w \\min_{\\alpha} \\quad\\mathcal{L}_{val}(w^*(\\alpha), \\alpha) \\\\ \\text{s.t.} \\quad w^*(\\alpha) = \\arg\\min_{w} \\mathcal{L}_{train}(w, \\alpha) \\tag{4} \u4e5f\u5373\uff1a\u5728\u5f53\u524d\u7684 training set\uff0c\u6211\u4eec\u8bad\u7ec3\u51fa\u4e00\u4e2a\u6700\u4f18\u7684\u7f51\u7edc\u53c2\u6570 w^* w^* \uff0c\u7136\u540e\u6839\u636e\u5f53\u524d\u7684 w^* w^* \u5728 validation set \u4e0a\u518d\u66f4\u65b0\u6211\u4eec\u7684\u8fde\u63a5\u6743\u91cd \\alpha \\alpha Gradient # \u6240\u6709\u795e\u7ecf\u7f51\u7edc\u7684\u4f18\u5316\u8fc7\u7a0b\u90fd\u7ed5\u4e0d\u5f00\u68af\u5ea6\uff0cDarts \u540c\u6837\u3002\u7531\uff084\uff09\u5f0f\u53ef\u77e5\uff0c\u6211\u4eec\u5bf9\u4e8e\u4f18\u5316 \\alpha \\alpha \u7684\u68af\u5ea6\u4e3a\uff1a \\nabla_{\\alpha} \\mathcal{L}_{val}(w^*(\\alpha), \\alpha) \\approx \\nabla_\\alpha\\mathcal{L}_{val}(w - \\xi\\nabla_w\\mathcal{L}_{train}(w,\\alpha),\\alpha) \\tag{5} \u8fd9\u91cc\u5c06\u6700\u4f18\u7684 w^*(\\alpha) w^*(\\alpha) \u66ff\u6362\u4e3a w - \\xi\\nabla_w\\mathcal{L}_{train}(w, \\alpha) w - \\xi\\nabla_w\\mathcal{L}_{train}(w, \\alpha) \u7684\u539f\u56e0\u662f 1. \u5982\u679c w w \u8db3\u591f\u63a5\u8fd1\u6700\u4f18\u503c w^* w^* \uff0c\u90a3\u4e48\u540e\u9762\u7684\u68af\u5ea6\u4e5f\u4f1a\u8d8b\u8fd1\u4e8e0\uff0c\u8fd1\u4f3c\u6210\u7acb\u30022.\u5c31\u7b97 w w \u5e76\u4e0d\u80fd\u5f88\u63a5\u8fd1 w^* w^* \uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u4fdd\u8bc1\u7b97\u6cd5\u7684\u6536\u655b\u6027\u3002\u5728\uff085\uff09\u7684\u57fa\u7840\u4e0a\uff0c\u8fd0\u7528\u94fe\u5f0f\u6cd5\u5219\uff1a w' = w - \\xi\\nabla_w\\mathcal{L}_{train}(w,\\alpha )\\\\ (5) = \\nabla_{\\alpha}\\mathcal{L}_{val}(w',\\alpha) - \\xi \\nabla^2_{\\alpha,w}\\mathcal{L}_{train}(w,\\alpha) \\nabla_{w'}\\mathcal{L}_{val}(w',\\alpha) P-Darts # Abstract # Motivation # \u4f7f\u7528\u539f\u7248\u7684 Darts \u8fdb\u884c\u8bad\u7ec3\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u53d1\u73b0\uff0c\u5b66\u4e60\u5230\u7684 block \u8fde\u63a5\u65b9\u5f0f\u4f1a\u504f\u5411 Introduction # Method # PC-Darts # Abstract # Introduction # Method #","title":"Darts"},{"location":"Paper/Darts/#differential-architecture-searchdarts","text":"\u672c\u7ae0\u8bb2\u4ecb\u7ecd\u4e09\u7bc7paper\uff0cDARTS\uff0cP-DARTS \u4ee5\u53ca PC-DARTS\uff0c\u8bba\u6587\u94fe\u63a5\uff1a DARTS \uff0c P-DARTS \uff0c PC-DARTS","title":"Differential ARchiTecture Search\uff08DARTS\uff09"},{"location":"Paper/Darts/#darts","text":"","title":"Darts"},{"location":"Paper/Darts/#abstract","text":"\u4f20\u7edf\u7684neural network search\uff0c\u5176\u641c\u7d22\u57df\u5927\u591a\u4e3a\u79bb\u6563\u57df\uff0c\u641c\u7d22\u65b9\u6cd5\u4e3a RL based \u6216\u8005 evolution\u3002\u8fd9\u7bc7 Darts \u7684\u641c\u7d22\u57df\u5219\u662f continuous space\uff0c\u5229\u7528\u7f51\u7edc\u7684 loss \u53bb update \u94fe\u63a5\u65b9\u5f0f\u3002","title":"Abstract"},{"location":"Paper/Darts/#introduction","text":"","title":"Introduction"},{"location":"Paper/Darts/#method","text":"","title":"Method"},{"location":"Paper/Darts/#method-description","text":"Darts \u5148\u5c06\u8fd0\u7b97\u6a21\u5757 block \u8fdb\u884c dense \u94fe\u63a5\uff08\u7c7b\u4f3c Densenet\uff09\u7b2c j \u4e2a\u6a21\u5757\u7684\u8f93\u5165\uff0c\u662f\u6709\u6240\u6709 index \u5c0f\u4e8e j \u7684\u6a21\u5757\u7684\u8f93\u51fa\u7684\u52a0\u6743\u548c\u3002 x^{(j)}=\\sum_{i<j}o^{(i,j)}(x^{i})\\tag{1} \u5728\u4e0b\u56fe\u4e2d\uff0c\u6bcf\u6839\u7ebf\u4ee3\u8868\u4e00\u79cd\u53ef\u80fd\u7684\u64cd\u4f5c\uff08\u6bd4\u5982 convolution\uff0cmax pooling\uff0czero\u94fe\u63a5\uff09\u3002\u90a3\u4e48\u6211\u4eec\u5728\u6bcf\u79cd\u64cd\u4f5c\u4e0a\u8d4b\u4e88\u4e00\u4e2a\u6743\u91cd \\alpha_i \\alpha_i \uff0c\u7136\u540e\u6839\u636e \\alpha \\alpha \u6765 \u8fc7\u4e00\u4e2a softmax \u52a0\u6743\u8ba1\u7b97\u51fa\u771f\u5b9e\u7684 output \\bar{o}^{(i,j)}(x) = \\sum_{o\\in \\mathcal{O}} \\frac{exp(\\alpha_o^{(i,j)})} {\\sum_{o'\\in\\mathcal{O}} exp(\\alpha_{o'}^{(i,j)})} o(x) \\tag{2} \u5728\u641c\u7d22\u7ed3\u675f\u4e4b\u540e\uff0c\u6211\u4eec\u4f1a\u9009\u53d6 \\alpha_i \\alpha_i \u6700\u5927\u7684\u4e00\u79cd\u64cd\u4f5c\u4f5c\u4e3a\u6211\u4eec\u6700\u540e\u7684\u8fde\u63a5\u65b9\u5f0f\uff08\u5176\u4ed6\u7684\u5907\u9009\u8fde\u63a5\u65b9\u5f0f\u76f4\u63a5\u653e\u5f03\uff09\uff1a o^{(i,j)} = \\arg\\max_{o\\in\\mathcal{O}} \\alpha_o^{(i,j)} \\tag{3}","title":"Method Description"},{"location":"Paper/Darts/#example","text":"\u4ee5 Darts \u7684 figure1 \u4e3a\u4f8b\u5b50\u8bf4\u660e\u3002\u5047\u8bbe block 0 \u548c block 1\u4e4b\u95f4\u6709\u4e09\u79cd\u8fde\u63a5\uff0c\u7ea2\u7ebf\u4ee3\u8868 convolution\uff0c\u7eff\u7ebf\u4ee3\u8868 avg pooling\uff0c\u84dd\u7ebf\u4ee3\u8868 zero \u8fde\u63a5\u3002\u5728\u5b66\u4e60\u9636\u6bb5\u7ed3\u675f\u4e4b\u540e\uff0c\u6211\u4eec\u7684\u6743\u91cd\u53c2\u6570 \\alpha^{(0,1)} \\alpha^{(0,1)} \u4e3a [2.3, 0.5, 0.9] [2.3, 0.5, 0.9] \uff0c\uff08\u5982\u679c\u8fc7 softmax \u5219\u662f [0.71, 0.12, 0.17] [0.71, 0.12, 0.17] \uff09\u90a3\u4e48 \\alpha_1^{(0,1)} \\alpha_1^{(0,1)} \u7684\u6743\u91cd\u6700\u5927\uff0c\u6211\u4eec\u9009\u62e9 convolution \u4f5c\u4e3a\u6700\u7ec8\u7684\u8fde\u63a5\u65b9\u5f0f\u3002","title":"Example"},{"location":"Paper/Darts/#training-method","text":"\u5728\u8bad\u7ec3\u7684\u65f6\u5019\uff0c\u6709\u4e24\u4e2a\u53c2\u6570\u9700\u8981\u4f9d\u6b21\u4f18\u5316\uff0c\u4e00\u4e2a\u662f\u6211\u4eec\u7684\u8fde\u63a5\u6743\u91cd\u53c2\u6570 \\alpha \\alpha \uff0c\u53e6\u5916\u5c31\u662f\u5728\u5f53\u524d\u6743\u91cd\u7684\u8fde\u63a5\u65b9\u5f0f\u4e0b\uff0c\u6211\u4eec\u7684\u6700\u4f18\u7f51\u7edc\u53c2\u6570 w w \\min_{\\alpha} \\quad\\mathcal{L}_{val}(w^*(\\alpha), \\alpha) \\\\ \\text{s.t.} \\quad w^*(\\alpha) = \\arg\\min_{w} \\mathcal{L}_{train}(w, \\alpha) \\tag{4} \u4e5f\u5373\uff1a\u5728\u5f53\u524d\u7684 training set\uff0c\u6211\u4eec\u8bad\u7ec3\u51fa\u4e00\u4e2a\u6700\u4f18\u7684\u7f51\u7edc\u53c2\u6570 w^* w^* \uff0c\u7136\u540e\u6839\u636e\u5f53\u524d\u7684 w^* w^* \u5728 validation set \u4e0a\u518d\u66f4\u65b0\u6211\u4eec\u7684\u8fde\u63a5\u6743\u91cd \\alpha \\alpha","title":"Training Method"},{"location":"Paper/Darts/#gradient","text":"\u6240\u6709\u795e\u7ecf\u7f51\u7edc\u7684\u4f18\u5316\u8fc7\u7a0b\u90fd\u7ed5\u4e0d\u5f00\u68af\u5ea6\uff0cDarts \u540c\u6837\u3002\u7531\uff084\uff09\u5f0f\u53ef\u77e5\uff0c\u6211\u4eec\u5bf9\u4e8e\u4f18\u5316 \\alpha \\alpha \u7684\u68af\u5ea6\u4e3a\uff1a \\nabla_{\\alpha} \\mathcal{L}_{val}(w^*(\\alpha), \\alpha) \\approx \\nabla_\\alpha\\mathcal{L}_{val}(w - \\xi\\nabla_w\\mathcal{L}_{train}(w,\\alpha),\\alpha) \\tag{5} \u8fd9\u91cc\u5c06\u6700\u4f18\u7684 w^*(\\alpha) w^*(\\alpha) \u66ff\u6362\u4e3a w - \\xi\\nabla_w\\mathcal{L}_{train}(w, \\alpha) w - \\xi\\nabla_w\\mathcal{L}_{train}(w, \\alpha) \u7684\u539f\u56e0\u662f 1. \u5982\u679c w w \u8db3\u591f\u63a5\u8fd1\u6700\u4f18\u503c w^* w^* \uff0c\u90a3\u4e48\u540e\u9762\u7684\u68af\u5ea6\u4e5f\u4f1a\u8d8b\u8fd1\u4e8e0\uff0c\u8fd1\u4f3c\u6210\u7acb\u30022.\u5c31\u7b97 w w \u5e76\u4e0d\u80fd\u5f88\u63a5\u8fd1 w^* w^* \uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u4fdd\u8bc1\u7b97\u6cd5\u7684\u6536\u655b\u6027\u3002\u5728\uff085\uff09\u7684\u57fa\u7840\u4e0a\uff0c\u8fd0\u7528\u94fe\u5f0f\u6cd5\u5219\uff1a w' = w - \\xi\\nabla_w\\mathcal{L}_{train}(w,\\alpha )\\\\ (5) = \\nabla_{\\alpha}\\mathcal{L}_{val}(w',\\alpha) - \\xi \\nabla^2_{\\alpha,w}\\mathcal{L}_{train}(w,\\alpha) \\nabla_{w'}\\mathcal{L}_{val}(w',\\alpha)","title":"Gradient"},{"location":"Paper/Darts/#p-darts","text":"","title":"P-Darts"},{"location":"Paper/Darts/#abstract_1","text":"","title":"Abstract"},{"location":"Paper/Darts/#motivation","text":"\u4f7f\u7528\u539f\u7248\u7684 Darts \u8fdb\u884c\u8bad\u7ec3\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u53d1\u73b0\uff0c\u5b66\u4e60\u5230\u7684 block \u8fde\u63a5\u65b9\u5f0f\u4f1a\u504f\u5411","title":"Motivation"},{"location":"Paper/Darts/#introduction_1","text":"","title":"Introduction"},{"location":"Paper/Darts/#method_1","text":"","title":"Method"},{"location":"Paper/Darts/#pc-darts","text":"","title":"PC-Darts"},{"location":"Paper/Darts/#abstract_2","text":"","title":"Abstract"},{"location":"Paper/Darts/#introduction_2","text":"","title":"Introduction"},{"location":"Paper/Darts/#method_2","text":"","title":"Method"},{"location":"Paper/OGDetection/","text":"Object Detection # \u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e9b object detection\u7684\u6570\u636e\u96c6\u3001\u635f\u5931\u51fd\u6570\uff0c\u4ee5\u53ca\u4f20\u7edfobject detection\u4f1a\u7528\u5230\u7684\u65b9\u6cd5\u3002","title":"Traditional Object Detection"},{"location":"Paper/OGDetection/#object-detection","text":"\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e9b object detection\u7684\u6570\u636e\u96c6\u3001\u635f\u5931\u51fd\u6570\uff0c\u4ee5\u53ca\u4f20\u7edfobject detection\u4f1a\u7528\u5230\u7684\u65b9\u6cd5\u3002","title":"Object Detection"},{"location":"Paper/SmallGroupLearning/","text":"Small Group Learning # Small Group Learning\u8bba\u6587\u94fe\u63a5: https://arxiv.org/pdf/2012.12502.pdf Notation # D^{(tr)} D^{(tr)} \uff1atraining\uff0c\u8bad\u7ec3\u96c6 D^{(val)} D^{(val)} \uff1avalidation\uff0c\u9a8c\u8bc1\u96c6 D^{(u)}=\\{x_i\\}_{i=1}^N D^{(u)}=\\{x_i\\}_{i=1}^N \uff1aunlabeled\uff0c\u672a\u6807\u5b9a\u6570\u636e\u96c6 D_k^{(pl)} D_k^{(pl)} \uff1apseudo labeled\uff0c\u7531\u7b2ck\u4e2a\u5b66\u4e60\u5668\uff0c\u6807\u5b9a D^{(u)} D^{(u)} \u7684\u7ed3\u679c V_k, W_k V_k, W_k \uff1a\u4e24\u7ec4\u53ef\u5b66\u4e60\u7684\u795e\u7ecf\u7f51\u7edc\u53c2\u6570 A_k A_k \uff1a\u795e\u7ecf\u7f51\u7edcArchetecture f(\\cdot,V_k(A_k)) f(\\cdot,V_k(A_k)) \uff1a\u4ee5 A_k A_k \u65b9\u5f0f\u642d\u5efa\u7684\u7f51\u7edc\uff0c\u53c2\u6570\u4e3a V_k V_k \u60c5\u51b5\u4e0b\uff0c\u795e\u7ecf\u7f51\u7edc\u6240\u4ee3\u8868\u7684\u51fd\u6570 L(\\cdot) L(\\cdot) \uff1a\u635f\u5931\u51fd\u6570 Method # SGL\u7684idea\u662f\uff0c\u82e5\u5e72\u4e2a\u5b66\u4e60\u5668\uff08learning\uff09\u5148\u72ec\u81ea\u5b66\u4e60\uff0c\u4e4b\u540e\u5c06\u6bcf\u4e2alearner\u7684\u5b66\u4e60\u7ed3\u679c\u8fdb\u884c\u6574\u5408\u3002 Stage 1\uff1a # \u6bcf\u4e2a\u5b66\u4e60\u5668 k k \u5728stage 1\u4f1a\u5355\u72ec\u5b66\u4e60\uff0c\u5f97\u5230\u4e00\u4e2a\u57fa\u4e8e\u5f53\u524darchitecture A_k A_k \u7684\u76ee\u524d\u6700\u4f18\u53c2\u6570 V^*_k(A_k) V^*_k(A_k) V^*_k(A_k) = \\min_{V_k}L(V_k, A_k, D^{(tr)}) Stage 2\uff1a # \u6bcf\u4e2a\u5b66\u4e60\u5668 k k \u5728stage 2\uff0c\u7531stage 1\u7684\u6700\u4f18\u53c2\u6570 V_k^*(A_k) V_k^*(A_k) \uff0c\u6765\u6807\u6ce8 D^{(u)} D^{(u)} \uff1a D_k^{(pl)}(D^{(u)}, V^*_k(A_k))=\\{(x_i, f(x_i, V^*_k(A_k))\\}_{i=1}^N D_k^{(pl)}(D^{(u)}, V^*_k(A_k))=\\{(x_i, f(x_i, V^*_k(A_k))\\}_{i=1}^N \u6ce8\u610f\u5230\uff0c\u539f\u8bba\u6587\u662f\u5206\u7c7b\u7f51\u7edc\uff0c\u6240\u4ee5 f(x_i, V^*_k(A_k))\\in \\mathbb{R}^{J} f(x_i, V^*_k(A_k))\\in \\mathbb{R}^{J} \uff0c J J \u662f\u5206\u7c7b\u603b\u6570\uff0c J J \u901a\u9053\u662f\u7ecf\u8fc7softmax\u5c42\uff0c\u4fdd\u8bc1\u6240\u6709\u901a\u9053\u6570\u603b\u548c\u662f 1 1 \u3002\u635f\u5931\u51fd\u6570\u662f\u4ea4\u53c9\u71b5\uff08\u7ecf\u5178\u5206\u7c7b\u95ee\u9898\u7684\u635f\u5931\u51fd\u6570\uff09 \u6bcf\u4e2a\u5b66\u4e60\u5668 k k \u4f1a\u6839\u636e\u5176\u4ed6\u5b66\u4e60\u5668\u751f\u6210\u7684 pseudo label \u6570\u636e\u96c6\u548c\u4eba\u5de5\u6807\u5b9a\u7684\u6570\u636e\u96c6\u4e00\u8d77\u6765\u8fdb\u884c\u8bad\u7ec3\u3002\u6765\u5f97\u5230\u4e00\u4e2a\u4e8c\u9636\u6bb5\u7684\u6700\u4f18\u795e\u7ecf\u7f51\u7edc\u53c2\u6570 W_k^* W_k^* \uff1a W_k^*(A_k, \\{V_j^*(A_j)\\}^K_{j\\not= k}) = \\min_{W_k}L(W_k, A_k, D^{(tr)}) + \\lambda\\sum_{j\\not= k}^KL(W_k, A_k, D_j^{pl}(D^{(u)},V_j^*(A_j))) W_k^*(A_k, \\{V_j^*(A_j)\\}^K_{j\\not= k}) = \\min_{W_k}L(W_k, A_k, D^{(tr)}) + \\lambda\\sum_{j\\not= k}^KL(W_k, A_k, D_j^{pl}(D^{(u)},V_j^*(A_j))) Stage 3: # \u57fa\u4e8e\u7b2c\u4e8c\u9636\u6bb5\u5f97\u5230\u7684 W_k^* W_k^* \uff0c\u6211\u4eec\u5728\u9a8c\u8bc1\u96c6\u4e0a\u8fdb\u884carchitecture\u7684\u4f18\u5316\uff1a \\min_{\\{A_k\\}_{k=1}^K} = \\sum_{k=1}^K L(W_k^*(A_k, \\{V_j^*(A_j)\\}^K_{j\\not= k}),A_k,D^{(val)}) \\min_{\\{A_k\\}_{k=1}^K} = \\sum_{k=1}^K L(W_k^*(A_k, \\{V_j^*(A_j)\\}^K_{j\\not= k}),A_k,D^{(val)}) \u7528\u4e0a\u8ff0\u635f\u5931\u51fd\u6570\uff0c\u53bb\u4f18\u5316\u795e\u7ecf\u7f51\u7edc\u7684\u7ed3\u6784 A_k A_k \u5176\u4f18\u5316\u7684\u65b9\u6cd5\uff0c\u5728 Darts \u4e2d\u6709\u5177\u4f53\u4ecb\u7ecd","title":"Small Group Learning"},{"location":"Paper/SmallGroupLearning/#small-group-learning","text":"Small Group Learning\u8bba\u6587\u94fe\u63a5: https://arxiv.org/pdf/2012.12502.pdf","title":"Small Group Learning"},{"location":"Paper/SmallGroupLearning/#notation","text":"D^{(tr)} D^{(tr)} \uff1atraining\uff0c\u8bad\u7ec3\u96c6 D^{(val)} D^{(val)} \uff1avalidation\uff0c\u9a8c\u8bc1\u96c6 D^{(u)}=\\{x_i\\}_{i=1}^N D^{(u)}=\\{x_i\\}_{i=1}^N \uff1aunlabeled\uff0c\u672a\u6807\u5b9a\u6570\u636e\u96c6 D_k^{(pl)} D_k^{(pl)} \uff1apseudo labeled\uff0c\u7531\u7b2ck\u4e2a\u5b66\u4e60\u5668\uff0c\u6807\u5b9a D^{(u)} D^{(u)} \u7684\u7ed3\u679c V_k, W_k V_k, W_k \uff1a\u4e24\u7ec4\u53ef\u5b66\u4e60\u7684\u795e\u7ecf\u7f51\u7edc\u53c2\u6570 A_k A_k \uff1a\u795e\u7ecf\u7f51\u7edcArchetecture f(\\cdot,V_k(A_k)) f(\\cdot,V_k(A_k)) \uff1a\u4ee5 A_k A_k \u65b9\u5f0f\u642d\u5efa\u7684\u7f51\u7edc\uff0c\u53c2\u6570\u4e3a V_k V_k \u60c5\u51b5\u4e0b\uff0c\u795e\u7ecf\u7f51\u7edc\u6240\u4ee3\u8868\u7684\u51fd\u6570 L(\\cdot) L(\\cdot) \uff1a\u635f\u5931\u51fd\u6570","title":"Notation"},{"location":"Paper/SmallGroupLearning/#method","text":"SGL\u7684idea\u662f\uff0c\u82e5\u5e72\u4e2a\u5b66\u4e60\u5668\uff08learning\uff09\u5148\u72ec\u81ea\u5b66\u4e60\uff0c\u4e4b\u540e\u5c06\u6bcf\u4e2alearner\u7684\u5b66\u4e60\u7ed3\u679c\u8fdb\u884c\u6574\u5408\u3002","title":"Method"},{"location":"Paper/SmallGroupLearning/#stage-1","text":"\u6bcf\u4e2a\u5b66\u4e60\u5668 k k \u5728stage 1\u4f1a\u5355\u72ec\u5b66\u4e60\uff0c\u5f97\u5230\u4e00\u4e2a\u57fa\u4e8e\u5f53\u524darchitecture A_k A_k \u7684\u76ee\u524d\u6700\u4f18\u53c2\u6570 V^*_k(A_k) V^*_k(A_k) V^*_k(A_k) = \\min_{V_k}L(V_k, A_k, D^{(tr)})","title":"Stage 1\uff1a"},{"location":"Paper/SmallGroupLearning/#stage-2","text":"\u6bcf\u4e2a\u5b66\u4e60\u5668 k k \u5728stage 2\uff0c\u7531stage 1\u7684\u6700\u4f18\u53c2\u6570 V_k^*(A_k) V_k^*(A_k) \uff0c\u6765\u6807\u6ce8 D^{(u)} D^{(u)} \uff1a D_k^{(pl)}(D^{(u)}, V^*_k(A_k))=\\{(x_i, f(x_i, V^*_k(A_k))\\}_{i=1}^N D_k^{(pl)}(D^{(u)}, V^*_k(A_k))=\\{(x_i, f(x_i, V^*_k(A_k))\\}_{i=1}^N \u6ce8\u610f\u5230\uff0c\u539f\u8bba\u6587\u662f\u5206\u7c7b\u7f51\u7edc\uff0c\u6240\u4ee5 f(x_i, V^*_k(A_k))\\in \\mathbb{R}^{J} f(x_i, V^*_k(A_k))\\in \\mathbb{R}^{J} \uff0c J J \u662f\u5206\u7c7b\u603b\u6570\uff0c J J \u901a\u9053\u662f\u7ecf\u8fc7softmax\u5c42\uff0c\u4fdd\u8bc1\u6240\u6709\u901a\u9053\u6570\u603b\u548c\u662f 1 1 \u3002\u635f\u5931\u51fd\u6570\u662f\u4ea4\u53c9\u71b5\uff08\u7ecf\u5178\u5206\u7c7b\u95ee\u9898\u7684\u635f\u5931\u51fd\u6570\uff09 \u6bcf\u4e2a\u5b66\u4e60\u5668 k k \u4f1a\u6839\u636e\u5176\u4ed6\u5b66\u4e60\u5668\u751f\u6210\u7684 pseudo label \u6570\u636e\u96c6\u548c\u4eba\u5de5\u6807\u5b9a\u7684\u6570\u636e\u96c6\u4e00\u8d77\u6765\u8fdb\u884c\u8bad\u7ec3\u3002\u6765\u5f97\u5230\u4e00\u4e2a\u4e8c\u9636\u6bb5\u7684\u6700\u4f18\u795e\u7ecf\u7f51\u7edc\u53c2\u6570 W_k^* W_k^* \uff1a W_k^*(A_k, \\{V_j^*(A_j)\\}^K_{j\\not= k}) = \\min_{W_k}L(W_k, A_k, D^{(tr)}) + \\lambda\\sum_{j\\not= k}^KL(W_k, A_k, D_j^{pl}(D^{(u)},V_j^*(A_j))) W_k^*(A_k, \\{V_j^*(A_j)\\}^K_{j\\not= k}) = \\min_{W_k}L(W_k, A_k, D^{(tr)}) + \\lambda\\sum_{j\\not= k}^KL(W_k, A_k, D_j^{pl}(D^{(u)},V_j^*(A_j)))","title":"Stage 2\uff1a"},{"location":"Paper/SmallGroupLearning/#stage-3","text":"\u57fa\u4e8e\u7b2c\u4e8c\u9636\u6bb5\u5f97\u5230\u7684 W_k^* W_k^* \uff0c\u6211\u4eec\u5728\u9a8c\u8bc1\u96c6\u4e0a\u8fdb\u884carchitecture\u7684\u4f18\u5316\uff1a \\min_{\\{A_k\\}_{k=1}^K} = \\sum_{k=1}^K L(W_k^*(A_k, \\{V_j^*(A_j)\\}^K_{j\\not= k}),A_k,D^{(val)}) \\min_{\\{A_k\\}_{k=1}^K} = \\sum_{k=1}^K L(W_k^*(A_k, \\{V_j^*(A_j)\\}^K_{j\\not= k}),A_k,D^{(val)}) \u7528\u4e0a\u8ff0\u635f\u5931\u51fd\u6570\uff0c\u53bb\u4f18\u5316\u795e\u7ecf\u7f51\u7edc\u7684\u7ed3\u6784 A_k A_k \u5176\u4f18\u5316\u7684\u65b9\u6cd5\uff0c\u5728 Darts \u4e2d\u6709\u5177\u4f53\u4ecb\u7ecd","title":"Stage 3:"},{"location":"Paper/graphneuralnetwork/","text":"","title":"Graphneuralnetwork"},{"location":"Pytorch/PytorchDebug/","text":"","title":"Pytorch Debug"},{"location":"Pytorch/PytorchPipeline/","text":"Pytorch Pipeline # \u8bb0\u5f55\u4e00\u4e0b\u5199 Pytorch \u7684\u4ee3\u7801\u65f6\u7684\u6807\u51c6\u6d41\u7a0b\u548c\u6a21\u7248 Argparse # Argparse\u7684 \u5165\u95e8\u4ecb\u7ecd \uff0cArgparse \u662f Python \u6807\u51c6\u5e93\u4e2d\u63a8\u8350\u7684\u547d\u4ee4\u884c\u89e3\u6790\u6a21\u5757\u3002\u662f\u5728\u8fd0\u884c\u4ee3\u7801\u65f6\uff0c\u7ed9\u4ee3\u7801\u4e2d\u7684\u4e00\u4e9b\u51fd\u6570\u589e\u52a0\u53ef\u4fee\u6539\u6027 \u53ef\u80fd\u4f1a\u9700\u8981\u8bbe\u7f6e\u7684\u53c2\u6570\uff1a import argparse parser = argparse . ArgumentParser () parser . add_argument ( '--batch_size' , type = int , default = 64 , help = 'batch size' ) parser . add_argument ( '--drop_out_rate' , type = float , default = 0.5 , help = 'drop out probability' ) parser . add_argument ( '--gpu' , type = int , default = 0 , help = 'gpu device id' ) parser . add_argument ( '--learning_rate' , type = float , default = 0.001 , help = 'learning rate' ) parser . add_argument ( '--seed' , type = int , default = 2 , help = 'random seed' ) parser . add_argument ( '--max_epochs' , type = int , default = 50 , help = 'num of training epochs' ) parser . add_argument ( '--model_path' , type = str , default = 'saved_models' , help = 'path to save the model' ) parser . add_argument ( '--momentum' , type = float , default = 0.9 , help = 'momentum' ) args = parser . parse_args () print ( args . batch_size ) # 64 \u5728\u8fd0\u884c\u7a0b\u5e8f\u65f6\u4fee\u6539 parser \u5185\u7684\u53c2\u6570\uff0c\u6bd4\u5982\u4fee\u6539 batch_size \u4e3a128 python XXX.py --batch_size 128 \u5982\u679c\u7528 jupyter notebook \u53bb\u8bbe\u7f6e arparse \u9700\u8981\u989d\u5916\u6dfb\u52a0\u7684\u8bed\u53e5\uff0c\u5426\u5219\u4f1a\u62a5\u9519 import sys sys . argv = [ '' ] del sys usage: ipykernel_launcher.py [ -h ] [ --batch_size BATCH_SIZE ] ipykernel_launcher.py: error: unrecognized arguments: -f /home/zhizuo/.local/share/jupyter/runtime/kernel-57666e1e-7ce9-40ac-bb68-d7ed61cd9624.json An exception has occurred, use %tb to see the full traceback. SystemExit: 2 \u77ed\u9009\u9879\uff0c\u5728\u8fd0\u884c\u7a0b\u5e8f\u65f6\u53ef\u4ee5\u5feb\u901f\u7684\u7d22\u5f15\u6240\u9700\u53c2\u6570 parser . add_argument ( '-bs' , '--batch_size' , type = int , default = 64 , help = 'batch size' ) Dataloader # Dataloader \u662f pytorch \u4e2d\u5904\u7406\u6570\u636e\uff0c\u751f\u6210 batch \u7684\u91cd\u8981\u5de5\u5177 \u7c7b\u5b9a\u4e49\u4e3a torch.utils.data.DataLoader torch . utils . data . DataLoader ( dataset , batch_size = 1 , shuffle = False , sampler = None , \\ batch_sampler = None , num_workers = 0 , collate_fn = None , pin_memory = False , \\ drop_last = False , timeout = 0 , worker_init_fn = None , multiprocessing_context = None ) \u53c2\u6570\u5217\u8868\uff1a Dataset\uff1a\u5b9a\u4e49\u7684 Utils # Utile \u6a21\u5757\u53ef\u4ee5\u5b9a\u4e49\u82e5\u5e72\u5728\u8bc4\u4ef7\u3001\u8bb0\u5f55 loss \u7684\u65f6\u5019\u6709\u7528\u7684\u51fd\u6570 Gpu Setup # \u67e5\u770b\u662f\u5426\u6709\u53ef\u7528gpu device = torch . device ( 'cuda' if torch . cuda . is_available () else 'cpu' ) \u5982\u679c\u9700\u8981\u591a\u5361 import os os . environ [ 'CUDA_VISIBILE_DEVICES' ] = '0,1,2,3' \u6e05\u695a gpu \u663e\u5b58 torch . cuda . empty_cache () Random Seed # \u8bbe\u7f6e\u56fa\u5b9a random seed \u7684\u4e3b\u8981\u539f\u56e0\u662f\u4e3a\u4e86\u53ef\u590d\u73b0 \u8bbe\u7f6e numpy\uff0ctorch tensor\uff0ctorch cuda tensor \u968f\u673a\u79cd\u5b50 np . random . see ( args . seed ) torch . manual_seed ( args . seed ) torch . cuda . manual_seed ( args . seed ) torch . backends . cudnn . deterministic = True torch . backends . cudnn . benchmark = False Tensor # Tensor \u662f pytorch \u4e2d\u6700\u5e38\u51fa\u73b0\u7684\u53d8\u91cf\u7c7b\u578b\uff0c\u548c numpy \u4e2d\u7684 array \u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u662f\u5e26\u6709\u68af\u5ea6\u7684\u5c5e\u6027\u3002 Training # \u4e5f\u5373\u7f51\u7edc\u6a21\u578b\u53c2\u6570\u7684\u66f4\u65b0\u3002\u5305\u62ec\u6574\u4e2a\u6d41\u7a0b\u7684 pipeline\uff0c\u5b9a\u4e49\u7f51\u7edc\uff0c\u5b9a\u4e49 dataloader\uff0c\u5904\u7406\u8f93\u5165\u8f93\u51fa\uff0c\u5b9a\u4e49 criterion\uff0c\u5b9a\u4e49 optimizer model = Model () for epoch in max_epochs : for data in enumerate ( train_sloader ): Attentions: # 1.\u4e0d\u8981\u4f7f\u7528\u592a\u5927\u7684 nn.Linear(m, n) \u5c42\uff0c\u56e0\u4e3a\u8fd9\u672c\u8d28\u662f\u77e9\u9635\u4e58\u6cd5\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f \\mathcal{O}(mn) \\mathcal{O}(mn) \u7684\uff0clinear \u5c42\u592a\u5927\u4f1a\u975e\u5e38\u5403\u663e\u5b58 2.\u4e0d\u8981\u5728\u592a\u957f\u5e8f\u5217\u4e2d\u4f7f\u7528 RNN\uff0c\u56e0\u4e3a RNN \u4f7f\u7528\u7684\u662f BPTT \u7b97\u6cd5\uff0c\u5176\u9700\u8981\u7684\u5185\u5b58\u548c\u8f93\u5165\u5e8f\u5217\u7684\u957f\u5ea6\u5448\u7ebf\u6027\u76f8\u5173 3.\u5728\u8bad\u7ec3\u7684\u4e4b\u524d\u8c03\u7528 model.train()\uff0c\u5728\u6d4b\u8bd5\u7684\u4e4b\u524d\u8c03\u7528 model.eval() 4.\u4e0d\u9700\u8981\u68af\u5ea6\u7684\u4ee3\u7801\u5757\u7528 with torch.no_grad() \u5305\u542b\u8d77\u6765 5.model.eval() \u548c torch.no_grad() \u7684\u533a\u522b\u662f\uff0cmodel.eval() \u662f\u5c06\u7f51\u7edc\u5207\u6362\u6210\u6d4b\u8bd5\u72b6\u6001\u4f8b\u5982 batch normalization \u548c dropout \u5728\u8bad\u7ec3\u548c\u6d4b\u8bd5\u7684\u7b97\u6cd5\u662f\u4e0d\u4e00\u6837\u7684\uff1btorch.no_grad() \u5219\u662f\u5c06\u6240\u6709 tensor \u7684\u81ea\u52a8\u6c42\u5bfc\u673a\u5236\u5173\u95ed\uff0c\u4ee5\u51cf\u5c11\u5b58\u50a8\u4f7f\u7528\u548c\u52a0\u901f\u8ba1\u7b97\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u65e0\u6cd5\u8fdb\u884c loss.backward() 6.loss.backward() \u524d\u7528 optimizer.zero_grad() \u5c06\u79ef\u7d2f\u7684\u68af\u5ea6\u6e05\u96f6 7.model.zero_grad() \u4f1a\u5c06\u6574\u4e2a\u7f51\u7edc\u7684\u53c2\u6570\u7684\u68af\u5ea6\u6e05\u96f6\uff1boptimizer.zero_grad() \u53ea\u662f\u5c06\u4f20\u5165\u4f18\u5316\u5668\u7684\u53c2\u6570\u6e05\u96f6 8.torch.utils.data.DataLoader \u4e2d\u5c3d\u91cf\u8bbe\u7f6e pin_memory=True\uff0c\u5bf9\u7279\u522b\u5c0f\u7684\u6570\u636e\u96c6\u5982 MNIST \u8bbe\u7f6e pin_memory=False \u53cd\u800c\u66f4\u5feb\u4e00\u4e9b\u3002num_workers \u7684\u8bbe\u7f6e\u9700\u8981\u5728\u5b9e\u9a8c\u4e2d\u627e\u5230\u6700\u5feb\u7684\u53d6\u503c\u3002num_workers \u662f\u5904\u7406 dataloader \u7684\u7ebf\u7a0b\u6570\u76ee\uff0c\u5e76\u4e0d\u4e00\u5b9a\u8d8a\u591a\u8d8a\u597d 9.","title":"Pytorch Pipeline"},{"location":"Pytorch/PytorchPipeline/#pytorch-pipeline","text":"\u8bb0\u5f55\u4e00\u4e0b\u5199 Pytorch \u7684\u4ee3\u7801\u65f6\u7684\u6807\u51c6\u6d41\u7a0b\u548c\u6a21\u7248","title":"Pytorch Pipeline"},{"location":"Pytorch/PytorchPipeline/#argparse","text":"Argparse\u7684 \u5165\u95e8\u4ecb\u7ecd \uff0cArgparse \u662f Python \u6807\u51c6\u5e93\u4e2d\u63a8\u8350\u7684\u547d\u4ee4\u884c\u89e3\u6790\u6a21\u5757\u3002\u662f\u5728\u8fd0\u884c\u4ee3\u7801\u65f6\uff0c\u7ed9\u4ee3\u7801\u4e2d\u7684\u4e00\u4e9b\u51fd\u6570\u589e\u52a0\u53ef\u4fee\u6539\u6027 \u53ef\u80fd\u4f1a\u9700\u8981\u8bbe\u7f6e\u7684\u53c2\u6570\uff1a import argparse parser = argparse . ArgumentParser () parser . add_argument ( '--batch_size' , type = int , default = 64 , help = 'batch size' ) parser . add_argument ( '--drop_out_rate' , type = float , default = 0.5 , help = 'drop out probability' ) parser . add_argument ( '--gpu' , type = int , default = 0 , help = 'gpu device id' ) parser . add_argument ( '--learning_rate' , type = float , default = 0.001 , help = 'learning rate' ) parser . add_argument ( '--seed' , type = int , default = 2 , help = 'random seed' ) parser . add_argument ( '--max_epochs' , type = int , default = 50 , help = 'num of training epochs' ) parser . add_argument ( '--model_path' , type = str , default = 'saved_models' , help = 'path to save the model' ) parser . add_argument ( '--momentum' , type = float , default = 0.9 , help = 'momentum' ) args = parser . parse_args () print ( args . batch_size ) # 64 \u5728\u8fd0\u884c\u7a0b\u5e8f\u65f6\u4fee\u6539 parser \u5185\u7684\u53c2\u6570\uff0c\u6bd4\u5982\u4fee\u6539 batch_size \u4e3a128 python XXX.py --batch_size 128 \u5982\u679c\u7528 jupyter notebook \u53bb\u8bbe\u7f6e arparse \u9700\u8981\u989d\u5916\u6dfb\u52a0\u7684\u8bed\u53e5\uff0c\u5426\u5219\u4f1a\u62a5\u9519 import sys sys . argv = [ '' ] del sys usage: ipykernel_launcher.py [ -h ] [ --batch_size BATCH_SIZE ] ipykernel_launcher.py: error: unrecognized arguments: -f /home/zhizuo/.local/share/jupyter/runtime/kernel-57666e1e-7ce9-40ac-bb68-d7ed61cd9624.json An exception has occurred, use %tb to see the full traceback. SystemExit: 2 \u77ed\u9009\u9879\uff0c\u5728\u8fd0\u884c\u7a0b\u5e8f\u65f6\u53ef\u4ee5\u5feb\u901f\u7684\u7d22\u5f15\u6240\u9700\u53c2\u6570 parser . add_argument ( '-bs' , '--batch_size' , type = int , default = 64 , help = 'batch size' )","title":"Argparse"},{"location":"Pytorch/PytorchPipeline/#dataloader","text":"Dataloader \u662f pytorch \u4e2d\u5904\u7406\u6570\u636e\uff0c\u751f\u6210 batch \u7684\u91cd\u8981\u5de5\u5177 \u7c7b\u5b9a\u4e49\u4e3a torch.utils.data.DataLoader torch . utils . data . DataLoader ( dataset , batch_size = 1 , shuffle = False , sampler = None , \\ batch_sampler = None , num_workers = 0 , collate_fn = None , pin_memory = False , \\ drop_last = False , timeout = 0 , worker_init_fn = None , multiprocessing_context = None ) \u53c2\u6570\u5217\u8868\uff1a Dataset\uff1a\u5b9a\u4e49\u7684","title":"Dataloader"},{"location":"Pytorch/PytorchPipeline/#utils","text":"Utile \u6a21\u5757\u53ef\u4ee5\u5b9a\u4e49\u82e5\u5e72\u5728\u8bc4\u4ef7\u3001\u8bb0\u5f55 loss \u7684\u65f6\u5019\u6709\u7528\u7684\u51fd\u6570","title":"Utils"},{"location":"Pytorch/PytorchPipeline/#gpu-setup","text":"\u67e5\u770b\u662f\u5426\u6709\u53ef\u7528gpu device = torch . device ( 'cuda' if torch . cuda . is_available () else 'cpu' ) \u5982\u679c\u9700\u8981\u591a\u5361 import os os . environ [ 'CUDA_VISIBILE_DEVICES' ] = '0,1,2,3' \u6e05\u695a gpu \u663e\u5b58 torch . cuda . empty_cache ()","title":"Gpu Setup"},{"location":"Pytorch/PytorchPipeline/#random-seed","text":"\u8bbe\u7f6e\u56fa\u5b9a random seed \u7684\u4e3b\u8981\u539f\u56e0\u662f\u4e3a\u4e86\u53ef\u590d\u73b0 \u8bbe\u7f6e numpy\uff0ctorch tensor\uff0ctorch cuda tensor \u968f\u673a\u79cd\u5b50 np . random . see ( args . seed ) torch . manual_seed ( args . seed ) torch . cuda . manual_seed ( args . seed ) torch . backends . cudnn . deterministic = True torch . backends . cudnn . benchmark = False","title":"Random Seed"},{"location":"Pytorch/PytorchPipeline/#tensor","text":"Tensor \u662f pytorch \u4e2d\u6700\u5e38\u51fa\u73b0\u7684\u53d8\u91cf\u7c7b\u578b\uff0c\u548c numpy \u4e2d\u7684 array \u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u662f\u5e26\u6709\u68af\u5ea6\u7684\u5c5e\u6027\u3002","title":"Tensor"},{"location":"Pytorch/PytorchPipeline/#training","text":"\u4e5f\u5373\u7f51\u7edc\u6a21\u578b\u53c2\u6570\u7684\u66f4\u65b0\u3002\u5305\u62ec\u6574\u4e2a\u6d41\u7a0b\u7684 pipeline\uff0c\u5b9a\u4e49\u7f51\u7edc\uff0c\u5b9a\u4e49 dataloader\uff0c\u5904\u7406\u8f93\u5165\u8f93\u51fa\uff0c\u5b9a\u4e49 criterion\uff0c\u5b9a\u4e49 optimizer model = Model () for epoch in max_epochs : for data in enumerate ( train_sloader ):","title":"Training"},{"location":"Pytorch/PytorchPipeline/#attentions","text":"1.\u4e0d\u8981\u4f7f\u7528\u592a\u5927\u7684 nn.Linear(m, n) \u5c42\uff0c\u56e0\u4e3a\u8fd9\u672c\u8d28\u662f\u77e9\u9635\u4e58\u6cd5\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f \\mathcal{O}(mn) \\mathcal{O}(mn) \u7684\uff0clinear \u5c42\u592a\u5927\u4f1a\u975e\u5e38\u5403\u663e\u5b58 2.\u4e0d\u8981\u5728\u592a\u957f\u5e8f\u5217\u4e2d\u4f7f\u7528 RNN\uff0c\u56e0\u4e3a RNN \u4f7f\u7528\u7684\u662f BPTT \u7b97\u6cd5\uff0c\u5176\u9700\u8981\u7684\u5185\u5b58\u548c\u8f93\u5165\u5e8f\u5217\u7684\u957f\u5ea6\u5448\u7ebf\u6027\u76f8\u5173 3.\u5728\u8bad\u7ec3\u7684\u4e4b\u524d\u8c03\u7528 model.train()\uff0c\u5728\u6d4b\u8bd5\u7684\u4e4b\u524d\u8c03\u7528 model.eval() 4.\u4e0d\u9700\u8981\u68af\u5ea6\u7684\u4ee3\u7801\u5757\u7528 with torch.no_grad() \u5305\u542b\u8d77\u6765 5.model.eval() \u548c torch.no_grad() \u7684\u533a\u522b\u662f\uff0cmodel.eval() \u662f\u5c06\u7f51\u7edc\u5207\u6362\u6210\u6d4b\u8bd5\u72b6\u6001\u4f8b\u5982 batch normalization \u548c dropout \u5728\u8bad\u7ec3\u548c\u6d4b\u8bd5\u7684\u7b97\u6cd5\u662f\u4e0d\u4e00\u6837\u7684\uff1btorch.no_grad() \u5219\u662f\u5c06\u6240\u6709 tensor \u7684\u81ea\u52a8\u6c42\u5bfc\u673a\u5236\u5173\u95ed\uff0c\u4ee5\u51cf\u5c11\u5b58\u50a8\u4f7f\u7528\u548c\u52a0\u901f\u8ba1\u7b97\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u65e0\u6cd5\u8fdb\u884c loss.backward() 6.loss.backward() \u524d\u7528 optimizer.zero_grad() \u5c06\u79ef\u7d2f\u7684\u68af\u5ea6\u6e05\u96f6 7.model.zero_grad() \u4f1a\u5c06\u6574\u4e2a\u7f51\u7edc\u7684\u53c2\u6570\u7684\u68af\u5ea6\u6e05\u96f6\uff1boptimizer.zero_grad() \u53ea\u662f\u5c06\u4f20\u5165\u4f18\u5316\u5668\u7684\u53c2\u6570\u6e05\u96f6 8.torch.utils.data.DataLoader \u4e2d\u5c3d\u91cf\u8bbe\u7f6e pin_memory=True\uff0c\u5bf9\u7279\u522b\u5c0f\u7684\u6570\u636e\u96c6\u5982 MNIST \u8bbe\u7f6e pin_memory=False \u53cd\u800c\u66f4\u5feb\u4e00\u4e9b\u3002num_workers \u7684\u8bbe\u7f6e\u9700\u8981\u5728\u5b9e\u9a8c\u4e2d\u627e\u5230\u6700\u5feb\u7684\u53d6\u503c\u3002num_workers \u662f\u5904\u7406 dataloader \u7684\u7ebf\u7a0b\u6570\u76ee\uff0c\u5e76\u4e0d\u4e00\u5b9a\u8d8a\u591a\u8d8a\u597d 9.","title":"Attentions:"},{"location":"ZMQ/ZMQIntro/","text":"ZMQ #","title":"ZMQ"},{"location":"ZMQ/ZMQIntro/#zmq","text":"","title":"ZMQ"},{"location":"gRPC/gRPCIntro/","text":"gRPC # \u6b22\u8fce\u8fdb\u5165 gRPC \u7684\u4ecb\u7ecd\u6587\u6863\uff0cgRPC \u4e00\u5f00\u59cb\u7531 google \u5f00\u53d1\uff0c\u662f\u4e00\u6b3e\u8bed\u8a00\u4e2d\u7acb\u3001\u5e73\u53f0\u4e2d\u7acb\u3001\u5f00\u6e90\u7684\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528(RPC)\u7cfb\u7edf\u3002 \u5927\u90e8\u5206\u6587\u6863\u548c\u8d44\u6599\u90fd\u53c2\u8003\u81ea\uff1a Medium gRPC \u4ecb\u7ecd gRPC\u5b98\u65b9\u4e2d\u6587\u6587\u6863 \u4ec0\u4e48\u662f gRPC # \u60f3\u8c61\u8fd9\u6837\u4e00\u4e2a\u573a\u666f\uff0c\u6211\u4eec\u6709\u4e00\u4e2a client \u548c server\u3002\u5728 client \u7aef\uff0c\u6211\u4eec\u5199\u597d\u4e86\u4e00\u4e9b\u975e\u5e38\u590d\u6742\u7684\u51fd\u6570\u6216\u8005\u67d0\u4e9b\u5e94\u7528\uff0c\u6211\u4eec\u60f3\u5728 server \u7aef\u8fdb\u884c\u8c03\u7528\u3002gRPC \u7684\u5b58\u5728\u5c31\u662f\u5e2e\u52a9\u6211\u4eec\uff1a\u5b9a\u4e49\u4e00\u4e2a*\u670d\u52a1*\uff0c\u6307\u5b9a\u5176\u80fd\u591f\u88ab\u8fdc\u7a0b\u8c03\u7528\u7684\u65b9\u6cd5\uff08\u5305\u542b\u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b\uff09\u3002 \u601d\u8003\uff1a\u6211\u4eec\u4f1a\u5982\u4f55\u8bbe\u8ba1 gRPC\uff1f # \u5728\u4e0d\u77e5\u9053\u4efb\u4f55 gRPC \u7684\u529f\u80fd\u4e4b\u524d\uff0c\u6211\u4eec\u8981\u601d\u8003\uff0cgRPC \u5230\u5e95\u662f\u505a\u4ec0\u4e48\u7684\u3002\u9996\u5148\uff0c\u7c7b\u4f3c ZMQ \uff0c\u4e92\u76f8\u901a\u4fe1\u7684\u662f client \u548c server\uff1bserver \u7aef\u6709\u4e00\u4e2a\u51fd\u6570\uff0cclient \u7aef\u9700\u8981\u8c03\u7528\u3002\u7b2c\u4e00\u6b65\u5c31\u662f\uff0c\u5efa\u7acb\u901a\u8baf\uff0c\u5c31\u662f\u6211\u4eec\u8981\u544a\u8bc9 server \u548c client\uff0c\u4ed6\u4eec\u662f\u4e92\u76f8\u901a\u8baf\u7684\u3002\u4f2a\u4ee3\u7801\u5982\u4e0b\uff1a server = gRPC . server (); // create a new server server . add_port ( some_port ); // connect to a port client = gRPC . client (); // create a new client client . connect_server (); // connect to a server \u4ee5\u6700\u7b80\u5355\u7684\u52a0\u6cd5\u4e3a\u4f8b\u5b50\uff0cserver \u6709\u8fd9\u4e48\u4e00\u4e2a\u51fd\u6570\uff1a int add ( int & x , int & y ) { return x + y ; } \u4f46\u662f client \u5e76\u4e0d\u77e5\u9053\u8fd9\u4e2a\u51fd\u6570\uff0c\u5982\u4f55\u5b9e\u73b0\u7684\uff0c\u4f46\u662f\u6211\u4eec\u77e5\u9053\u51fd\u6570\u7684\u540d\u5b57\u4ee5\u53ca\u51fd\u6570\u63a5\u53e3\uff0c\u90a3\u4e48\u6211\u4eec client \u5c31\u53ef\u4ee5\u4f20\u4e00\u4e2a\u6d88\u606f\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u6307\u5b9a\u7684\u51fd\u6570\uff08\u67d0\u79cd\u65b9\u6cd5\u53bb\u9009\u62e9\u5177\u4f53\u7684\u51fd\u6570\uff09\uff0c\u4ee5\u53ca\u51fd\u6570\u53c2\u6570\u3002\u90a3\u4e48 server \u7aef\u9700\u8981\u80fd\u591f\u89e3\u7801\uff0c\u77e5\u9053 client \u4f20\u8fc7\u6765\u7684\u6d88\u606f\uff0c\u662f\u63d0\u51fa\u4e86\u4e00\u4e2a\u600e\u6837\u7684 request\u3002\u8fd9\u4e2a\u534f\u8bae\u7684\u65b9\u6cd5\u5c31\u53eb gRPC\u3002 \u6bd4\u65b9\u8bf4\uff0c\u6211\u4eec\u7684\u534f\u8bae\u5c31\u53ef\u4ee5\u662f \u51fd\u6570\u540d\u5b57 + \u53c2\u6570\u5217\u8868\uff0c\u4ee5\u7a7a\u683c\u6765\u5206\u5f00 string msg = ' add ' + ' ' + to_string ( 1 ) + ' ' + to_string ( 2 ); client . send ( msg ); recv_msg = server . recv ( msg ); encode_msg = recv_msg . encode (); // add, x = 1, y = 2 \u4f46\u662f\u6211\u4eec\u77e5\u9053\uff0c\u51fd\u6570\u662f\u5343\u53d8\u4e07\u5316\u7684\uff0c\u53c2\u6570\u7c7b\u578b\u53ef\u4ee5\u662f int\uff0cstring\uff0c\u751a\u81f3\u662f\u7ed3\u6784\u4f53\uff0c\u800c\u4e14\u8bf7\u6c42\u4e0d\u4e00\u5b9a\u662f\u8bbf\u95ee\u67d0\u4e2a\u51fd\u6570\uff0c\u53ef\u80fd\u662f\u4e00\u7cfb\u5217\u7684\u64cd\u4f5c\uff0c\u76f8\u5f53\u590d\u6742\uff0c\u6240\u4ee5\u4e0a\u8ff0\u7684 encode \u548c decode \u65b9\u5f0f\uff0c\u5c31\u663e\u5f97\u592a naive \u4e86\u3002 \u8fd9\u65f6\u5019\u5c31\u6709 gRPC \u6b63\u5f0f\u51fa\u573a\u4e86\uff0cgRPC \u5c31\u662f\u5229\u7528 protoco buffer \u53bb\u5b9e\u73b0 encode \u548c decode \u7684\u8fc7\u7a0b\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u5f00\u59cb\u6b63\u5f0f\u4ecb\u7ecd gRPC gRPC \u5b9e\u9a8c # \u539f\u59cb\u5b9e\u9a8c\uff0c\u53ef\u4ee5\u53c2\u8003 Medium gRPC \u4ecb\u7ecd \u6211\u4eec\u4ee5\u5982\u4e0b\u8def\u5f84\u5f00\u59cb\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939\uff1a . \u251c\u2500\u2500 blueprint <- Source root - Name of our project \u2502 \u251c\u2500\u2500 app.py <- Application server \u2502 \u251c\u2500\u2500 add_client.py <- gRPC client for testing \u2502 \u251c\u2500\u2500 generated <- Generated gRPC Python code \u2502 \u2502 \u251c\u2500\u2500 add_pb2_grpc.py \u2502 \u2502 \u2514\u2500\u2500 add_pb2.py \u2502 \u251c\u2500\u2500 grpc.py <- Actual gRPC code \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 __main__.py \u2502 \u251c\u2500\u2500 proto <- Protobuf definitions \u2502 \u2502 \u2514\u2500\u2500 add.proto \u2502 \u2514\u2500\u2500 resources \u251c\u2500\u2500 tests <- Test suite \u2502 \u251c\u2500\u2500 conftest.py \u2502 \u251c\u2500\u2500 context.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 test_grpc.py \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 pytest.ini \u2514\u2500\u2500 requirements.txt \u73af\u5883\u914d\u7f6e\u53ef\u4ee5\u53c2\u8003 Medium gRPC \u4ecb\u7ecd \u5148\u770b\u6838\u5fc3\u90e8\u5206\uff0cadd.proto\u90e8\u5206\uff1a syntax = \"proto3\" ; package add ; // The request message containing the user's message. message AddRequest { int32 x = 1 ; int32 y = 2 } // The response message containing the original message. message AddReply { int32 ret = 1 ; } // The echo service definition. service Add { // Echo back reply. rpc Reply ( AddRequest ) returns ( AddReply ) {} } \u5728\u8fd9\u4e2a add.proto \u90e8\u5206\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u5b9a\u4e49\u4e86\u4e09\u4e2a\u51fd\u6570\uff0c\u4e00\u4e2a\u662f AddRequest\uff0c\u7b2c\u4e8c\u4e2a\u662f AddReply\uff0c\u7b2c\u4e09\u4e2a\u662f Add\u3002\u5728 AddRequest \u91cc\u9762\uff0cx = 1 \u548c y = 2 \u610f\u4e49\u5e76\u4e0d\u662f\u7ed9 x \u548c y \u8d4b\u503c\uff0c\u800c\u662f\u7ed9 x \u548c y \u5206\u914d\u4e0d\u540c\u7684 field\uff1b\u540c\u7406 AddReply\u3002 \u5229\u7528\u547d\u4ee4 python -m grpc_tools.protoc -I blueprint/proto --python_out = ./blueprint/generated --grpc_python_out = ./blueprint/generated ./blueprint/proto/*.proto sed -i -E 's/^import.*_pb2/from . \\0/' ./blueprint/generated/*.py \u5c31\u53ef\u4ee5\u6839\u636e add.proto\u7684\u914d\u7f6e\uff0c\u5728 /blueprint/generated \u6587\u4ef6\u5939\u4e0b\uff0c\u81ea\u52a8\u751f\u6210\u4e24\u4e2a\u6587\u4ef6\u3002 \u5728 grpc.py \u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u586b\u5199\uff1a # grpc.py from .generated import add_pb2_grpc , add_pb2 class Adder ( add_pb2_grpc . AddServicer ): def AddReply ( self , request , context ): return add_pb2 . AddReply ( ret = ( request . x + request . y )) \u8fd9\u6837\u5c31\u53ef\u4ee5\u8c03\u7528 add_pb2_grpc \u548c add_pb2 \u91cc\u9762\u7684\u5b9a\u4e49\u597d\u7684\u7c7b \u63a5\u4e0b\u6765\u914d\u7f6eserver\u7aef\uff0c\u7ed9\u5b9a port\uff0cserver\u8981\u5efa\u7acb\u8fde\u63a5\u3002 # app.py from concurrent import futures import grpc from .generated import add_pb2_grpc from .grpc import Adder class Server : @staticmethod def run (): server = grpc . server ( futures . ThreadPoolExecutor ( max_workers = 10 )) add_pb2_grpc . add_EchoServicer_to_server ( Adder (), server ) server . add_insecure_port ( '[::]:50051' ) server . start () server . wait_for_termination () \u914d\u7f6e _ main_ .py # __main__.py from .app import Server if __name__ == '__main__' : Server . run () \u914d\u7f6eclient\uff0cconnect \u548c server\u7aef\u4e00\u6837\u7684\u901a\u9053\u3002 from __future__ import print_function import logging import grpc from .generated import add_pb2 from .generated import add_pb2_grpc def run (): with grpc . insecure_channel ( \"localhost:50051\" ) as channel : stub = add_pb2_grpc . AddStub ( channel ) response = stub . ADDReply ( add_pb2 . AddRequest ( x = 1 , y = 2 )) print ( \"Echo client received: \" + str ( response . ret )) if __name__ == '__main__' : logging . basicConfig () run () \u8fd9\u6837\u5c31\u53ef\u4ee5\u8fdb\u884c\u4ea4\u4e92\u4e86\uff01 \u7136\u540e\u8fd0\u884c Medium gRPC \u4ecb\u7ecd \u7684\u547d\u4ee4\u5373\u53ef\u3002","title":"gRPC"},{"location":"gRPC/gRPCIntro/#grpc","text":"\u6b22\u8fce\u8fdb\u5165 gRPC \u7684\u4ecb\u7ecd\u6587\u6863\uff0cgRPC \u4e00\u5f00\u59cb\u7531 google \u5f00\u53d1\uff0c\u662f\u4e00\u6b3e\u8bed\u8a00\u4e2d\u7acb\u3001\u5e73\u53f0\u4e2d\u7acb\u3001\u5f00\u6e90\u7684\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528(RPC)\u7cfb\u7edf\u3002 \u5927\u90e8\u5206\u6587\u6863\u548c\u8d44\u6599\u90fd\u53c2\u8003\u81ea\uff1a Medium gRPC \u4ecb\u7ecd gRPC\u5b98\u65b9\u4e2d\u6587\u6587\u6863","title":"gRPC"},{"location":"gRPC/gRPCIntro/#grpc_1","text":"\u60f3\u8c61\u8fd9\u6837\u4e00\u4e2a\u573a\u666f\uff0c\u6211\u4eec\u6709\u4e00\u4e2a client \u548c server\u3002\u5728 client \u7aef\uff0c\u6211\u4eec\u5199\u597d\u4e86\u4e00\u4e9b\u975e\u5e38\u590d\u6742\u7684\u51fd\u6570\u6216\u8005\u67d0\u4e9b\u5e94\u7528\uff0c\u6211\u4eec\u60f3\u5728 server \u7aef\u8fdb\u884c\u8c03\u7528\u3002gRPC \u7684\u5b58\u5728\u5c31\u662f\u5e2e\u52a9\u6211\u4eec\uff1a\u5b9a\u4e49\u4e00\u4e2a*\u670d\u52a1*\uff0c\u6307\u5b9a\u5176\u80fd\u591f\u88ab\u8fdc\u7a0b\u8c03\u7528\u7684\u65b9\u6cd5\uff08\u5305\u542b\u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b\uff09\u3002","title":"\u4ec0\u4e48\u662f gRPC"},{"location":"gRPC/gRPCIntro/#grpc_2","text":"\u5728\u4e0d\u77e5\u9053\u4efb\u4f55 gRPC \u7684\u529f\u80fd\u4e4b\u524d\uff0c\u6211\u4eec\u8981\u601d\u8003\uff0cgRPC \u5230\u5e95\u662f\u505a\u4ec0\u4e48\u7684\u3002\u9996\u5148\uff0c\u7c7b\u4f3c ZMQ \uff0c\u4e92\u76f8\u901a\u4fe1\u7684\u662f client \u548c server\uff1bserver \u7aef\u6709\u4e00\u4e2a\u51fd\u6570\uff0cclient \u7aef\u9700\u8981\u8c03\u7528\u3002\u7b2c\u4e00\u6b65\u5c31\u662f\uff0c\u5efa\u7acb\u901a\u8baf\uff0c\u5c31\u662f\u6211\u4eec\u8981\u544a\u8bc9 server \u548c client\uff0c\u4ed6\u4eec\u662f\u4e92\u76f8\u901a\u8baf\u7684\u3002\u4f2a\u4ee3\u7801\u5982\u4e0b\uff1a server = gRPC . server (); // create a new server server . add_port ( some_port ); // connect to a port client = gRPC . client (); // create a new client client . connect_server (); // connect to a server \u4ee5\u6700\u7b80\u5355\u7684\u52a0\u6cd5\u4e3a\u4f8b\u5b50\uff0cserver \u6709\u8fd9\u4e48\u4e00\u4e2a\u51fd\u6570\uff1a int add ( int & x , int & y ) { return x + y ; } \u4f46\u662f client \u5e76\u4e0d\u77e5\u9053\u8fd9\u4e2a\u51fd\u6570\uff0c\u5982\u4f55\u5b9e\u73b0\u7684\uff0c\u4f46\u662f\u6211\u4eec\u77e5\u9053\u51fd\u6570\u7684\u540d\u5b57\u4ee5\u53ca\u51fd\u6570\u63a5\u53e3\uff0c\u90a3\u4e48\u6211\u4eec client \u5c31\u53ef\u4ee5\u4f20\u4e00\u4e2a\u6d88\u606f\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u6307\u5b9a\u7684\u51fd\u6570\uff08\u67d0\u79cd\u65b9\u6cd5\u53bb\u9009\u62e9\u5177\u4f53\u7684\u51fd\u6570\uff09\uff0c\u4ee5\u53ca\u51fd\u6570\u53c2\u6570\u3002\u90a3\u4e48 server \u7aef\u9700\u8981\u80fd\u591f\u89e3\u7801\uff0c\u77e5\u9053 client \u4f20\u8fc7\u6765\u7684\u6d88\u606f\uff0c\u662f\u63d0\u51fa\u4e86\u4e00\u4e2a\u600e\u6837\u7684 request\u3002\u8fd9\u4e2a\u534f\u8bae\u7684\u65b9\u6cd5\u5c31\u53eb gRPC\u3002 \u6bd4\u65b9\u8bf4\uff0c\u6211\u4eec\u7684\u534f\u8bae\u5c31\u53ef\u4ee5\u662f \u51fd\u6570\u540d\u5b57 + \u53c2\u6570\u5217\u8868\uff0c\u4ee5\u7a7a\u683c\u6765\u5206\u5f00 string msg = ' add ' + ' ' + to_string ( 1 ) + ' ' + to_string ( 2 ); client . send ( msg ); recv_msg = server . recv ( msg ); encode_msg = recv_msg . encode (); // add, x = 1, y = 2 \u4f46\u662f\u6211\u4eec\u77e5\u9053\uff0c\u51fd\u6570\u662f\u5343\u53d8\u4e07\u5316\u7684\uff0c\u53c2\u6570\u7c7b\u578b\u53ef\u4ee5\u662f int\uff0cstring\uff0c\u751a\u81f3\u662f\u7ed3\u6784\u4f53\uff0c\u800c\u4e14\u8bf7\u6c42\u4e0d\u4e00\u5b9a\u662f\u8bbf\u95ee\u67d0\u4e2a\u51fd\u6570\uff0c\u53ef\u80fd\u662f\u4e00\u7cfb\u5217\u7684\u64cd\u4f5c\uff0c\u76f8\u5f53\u590d\u6742\uff0c\u6240\u4ee5\u4e0a\u8ff0\u7684 encode \u548c decode \u65b9\u5f0f\uff0c\u5c31\u663e\u5f97\u592a naive \u4e86\u3002 \u8fd9\u65f6\u5019\u5c31\u6709 gRPC \u6b63\u5f0f\u51fa\u573a\u4e86\uff0cgRPC \u5c31\u662f\u5229\u7528 protoco buffer \u53bb\u5b9e\u73b0 encode \u548c decode \u7684\u8fc7\u7a0b\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u5f00\u59cb\u6b63\u5f0f\u4ecb\u7ecd gRPC","title":"\u601d\u8003\uff1a\u6211\u4eec\u4f1a\u5982\u4f55\u8bbe\u8ba1 gRPC\uff1f"},{"location":"gRPC/gRPCIntro/#grpc_3","text":"\u539f\u59cb\u5b9e\u9a8c\uff0c\u53ef\u4ee5\u53c2\u8003 Medium gRPC \u4ecb\u7ecd \u6211\u4eec\u4ee5\u5982\u4e0b\u8def\u5f84\u5f00\u59cb\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939\uff1a . \u251c\u2500\u2500 blueprint <- Source root - Name of our project \u2502 \u251c\u2500\u2500 app.py <- Application server \u2502 \u251c\u2500\u2500 add_client.py <- gRPC client for testing \u2502 \u251c\u2500\u2500 generated <- Generated gRPC Python code \u2502 \u2502 \u251c\u2500\u2500 add_pb2_grpc.py \u2502 \u2502 \u2514\u2500\u2500 add_pb2.py \u2502 \u251c\u2500\u2500 grpc.py <- Actual gRPC code \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 __main__.py \u2502 \u251c\u2500\u2500 proto <- Protobuf definitions \u2502 \u2502 \u2514\u2500\u2500 add.proto \u2502 \u2514\u2500\u2500 resources \u251c\u2500\u2500 tests <- Test suite \u2502 \u251c\u2500\u2500 conftest.py \u2502 \u251c\u2500\u2500 context.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 test_grpc.py \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 pytest.ini \u2514\u2500\u2500 requirements.txt \u73af\u5883\u914d\u7f6e\u53ef\u4ee5\u53c2\u8003 Medium gRPC \u4ecb\u7ecd \u5148\u770b\u6838\u5fc3\u90e8\u5206\uff0cadd.proto\u90e8\u5206\uff1a syntax = \"proto3\" ; package add ; // The request message containing the user's message. message AddRequest { int32 x = 1 ; int32 y = 2 } // The response message containing the original message. message AddReply { int32 ret = 1 ; } // The echo service definition. service Add { // Echo back reply. rpc Reply ( AddRequest ) returns ( AddReply ) {} } \u5728\u8fd9\u4e2a add.proto \u90e8\u5206\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u5b9a\u4e49\u4e86\u4e09\u4e2a\u51fd\u6570\uff0c\u4e00\u4e2a\u662f AddRequest\uff0c\u7b2c\u4e8c\u4e2a\u662f AddReply\uff0c\u7b2c\u4e09\u4e2a\u662f Add\u3002\u5728 AddRequest \u91cc\u9762\uff0cx = 1 \u548c y = 2 \u610f\u4e49\u5e76\u4e0d\u662f\u7ed9 x \u548c y \u8d4b\u503c\uff0c\u800c\u662f\u7ed9 x \u548c y \u5206\u914d\u4e0d\u540c\u7684 field\uff1b\u540c\u7406 AddReply\u3002 \u5229\u7528\u547d\u4ee4 python -m grpc_tools.protoc -I blueprint/proto --python_out = ./blueprint/generated --grpc_python_out = ./blueprint/generated ./blueprint/proto/*.proto sed -i -E 's/^import.*_pb2/from . \\0/' ./blueprint/generated/*.py \u5c31\u53ef\u4ee5\u6839\u636e add.proto\u7684\u914d\u7f6e\uff0c\u5728 /blueprint/generated \u6587\u4ef6\u5939\u4e0b\uff0c\u81ea\u52a8\u751f\u6210\u4e24\u4e2a\u6587\u4ef6\u3002 \u5728 grpc.py \u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u586b\u5199\uff1a # grpc.py from .generated import add_pb2_grpc , add_pb2 class Adder ( add_pb2_grpc . AddServicer ): def AddReply ( self , request , context ): return add_pb2 . AddReply ( ret = ( request . x + request . y )) \u8fd9\u6837\u5c31\u53ef\u4ee5\u8c03\u7528 add_pb2_grpc \u548c add_pb2 \u91cc\u9762\u7684\u5b9a\u4e49\u597d\u7684\u7c7b \u63a5\u4e0b\u6765\u914d\u7f6eserver\u7aef\uff0c\u7ed9\u5b9a port\uff0cserver\u8981\u5efa\u7acb\u8fde\u63a5\u3002 # app.py from concurrent import futures import grpc from .generated import add_pb2_grpc from .grpc import Adder class Server : @staticmethod def run (): server = grpc . server ( futures . ThreadPoolExecutor ( max_workers = 10 )) add_pb2_grpc . add_EchoServicer_to_server ( Adder (), server ) server . add_insecure_port ( '[::]:50051' ) server . start () server . wait_for_termination () \u914d\u7f6e _ main_ .py # __main__.py from .app import Server if __name__ == '__main__' : Server . run () \u914d\u7f6eclient\uff0cconnect \u548c server\u7aef\u4e00\u6837\u7684\u901a\u9053\u3002 from __future__ import print_function import logging import grpc from .generated import add_pb2 from .generated import add_pb2_grpc def run (): with grpc . insecure_channel ( \"localhost:50051\" ) as channel : stub = add_pb2_grpc . AddStub ( channel ) response = stub . ADDReply ( add_pb2 . AddRequest ( x = 1 , y = 2 )) print ( \"Echo client received: \" + str ( response . ret )) if __name__ == '__main__' : logging . basicConfig () run () \u8fd9\u6837\u5c31\u53ef\u4ee5\u8fdb\u884c\u4ea4\u4e92\u4e86\uff01 \u7136\u540e\u8fd0\u884c Medium gRPC \u4ecb\u7ecd \u7684\u547d\u4ee4\u5373\u53ef\u3002","title":"gRPC \u5b9e\u9a8c"}]}